{
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0U4M9zUgBSGu",
        "outputId": "dc0dcc36-580f-4490-852a-c825d6be0d91"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive\n"
          ]
        }
      ],
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "JJHNBb6GDWEV"
      },
      "outputs": [],
      "source": [
        "import numpy as np \n",
        "import pandas as pd \n",
        "import matplotlib.pyplot as plt\n",
        "import cv2\n",
        "import tensorflow as tf\n",
        "from PIL import Image\n",
        "import os\n",
        "#os.chdir('D:/Traffic_Sign_Recognition')\n",
        "from sklearn.model_selection import train_test_split\n",
        "#from keras.utils import to_categorical\n",
        "from keras.models import Sequential, load_model\n",
        "from keras.layers import Conv2D, MaxPool2D, Dense, Flatten, Dropout\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "eE7X5FiFFi19",
        "outputId": "1d31874f-f412-486e-91fa-ddb6ef2b7cd7"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting tensorflow-addons\n",
            "  Downloading tensorflow_addons-0.16.1-cp37-cp37m-manylinux_2_12_x86_64.manylinux2010_x86_64.whl (1.1 MB)\n",
            "\u001b[?25l\r\u001b[K     |▎                               | 10 kB 17.3 MB/s eta 0:00:01\r\u001b[K     |▋                               | 20 kB 24.0 MB/s eta 0:00:01\r\u001b[K     |▉                               | 30 kB 24.8 MB/s eta 0:00:01\r\u001b[K     |█▏                              | 40 kB 20.1 MB/s eta 0:00:01\r\u001b[K     |█▌                              | 51 kB 18.8 MB/s eta 0:00:01\r\u001b[K     |█▊                              | 61 kB 21.4 MB/s eta 0:00:01\r\u001b[K     |██                              | 71 kB 19.5 MB/s eta 0:00:01\r\u001b[K     |██▍                             | 81 kB 21.2 MB/s eta 0:00:01\r\u001b[K     |██▋                             | 92 kB 22.7 MB/s eta 0:00:01\r\u001b[K     |███                             | 102 kB 22.1 MB/s eta 0:00:01\r\u001b[K     |███▏                            | 112 kB 22.1 MB/s eta 0:00:01\r\u001b[K     |███▌                            | 122 kB 22.1 MB/s eta 0:00:01\r\u001b[K     |███▉                            | 133 kB 22.1 MB/s eta 0:00:01\r\u001b[K     |████                            | 143 kB 22.1 MB/s eta 0:00:01\r\u001b[K     |████▍                           | 153 kB 22.1 MB/s eta 0:00:01\r\u001b[K     |████▊                           | 163 kB 22.1 MB/s eta 0:00:01\r\u001b[K     |█████                           | 174 kB 22.1 MB/s eta 0:00:01\r\u001b[K     |█████▎                          | 184 kB 22.1 MB/s eta 0:00:01\r\u001b[K     |█████▌                          | 194 kB 22.1 MB/s eta 0:00:01\r\u001b[K     |█████▉                          | 204 kB 22.1 MB/s eta 0:00:01\r\u001b[K     |██████▏                         | 215 kB 22.1 MB/s eta 0:00:01\r\u001b[K     |██████▍                         | 225 kB 22.1 MB/s eta 0:00:01\r\u001b[K     |██████▊                         | 235 kB 22.1 MB/s eta 0:00:01\r\u001b[K     |███████                         | 245 kB 22.1 MB/s eta 0:00:01\r\u001b[K     |███████▎                        | 256 kB 22.1 MB/s eta 0:00:01\r\u001b[K     |███████▋                        | 266 kB 22.1 MB/s eta 0:00:01\r\u001b[K     |███████▉                        | 276 kB 22.1 MB/s eta 0:00:01\r\u001b[K     |████████▏                       | 286 kB 22.1 MB/s eta 0:00:01\r\u001b[K     |████████▌                       | 296 kB 22.1 MB/s eta 0:00:01\r\u001b[K     |████████▊                       | 307 kB 22.1 MB/s eta 0:00:01\r\u001b[K     |█████████                       | 317 kB 22.1 MB/s eta 0:00:01\r\u001b[K     |█████████▍                      | 327 kB 22.1 MB/s eta 0:00:01\r\u001b[K     |█████████▋                      | 337 kB 22.1 MB/s eta 0:00:01\r\u001b[K     |██████████                      | 348 kB 22.1 MB/s eta 0:00:01\r\u001b[K     |██████████▏                     | 358 kB 22.1 MB/s eta 0:00:01\r\u001b[K     |██████████▌                     | 368 kB 22.1 MB/s eta 0:00:01\r\u001b[K     |██████████▉                     | 378 kB 22.1 MB/s eta 0:00:01\r\u001b[K     |███████████                     | 389 kB 22.1 MB/s eta 0:00:01\r\u001b[K     |███████████▍                    | 399 kB 22.1 MB/s eta 0:00:01\r\u001b[K     |███████████▊                    | 409 kB 22.1 MB/s eta 0:00:01\r\u001b[K     |████████████                    | 419 kB 22.1 MB/s eta 0:00:01\r\u001b[K     |████████████▎                   | 430 kB 22.1 MB/s eta 0:00:01\r\u001b[K     |████████████▌                   | 440 kB 22.1 MB/s eta 0:00:01\r\u001b[K     |████████████▉                   | 450 kB 22.1 MB/s eta 0:00:01\r\u001b[K     |█████████████▏                  | 460 kB 22.1 MB/s eta 0:00:01\r\u001b[K     |█████████████▍                  | 471 kB 22.1 MB/s eta 0:00:01\r\u001b[K     |█████████████▊                  | 481 kB 22.1 MB/s eta 0:00:01\r\u001b[K     |██████████████                  | 491 kB 22.1 MB/s eta 0:00:01\r\u001b[K     |██████████████▎                 | 501 kB 22.1 MB/s eta 0:00:01\r\u001b[K     |██████████████▋                 | 512 kB 22.1 MB/s eta 0:00:01\r\u001b[K     |██████████████▉                 | 522 kB 22.1 MB/s eta 0:00:01\r\u001b[K     |███████████████▏                | 532 kB 22.1 MB/s eta 0:00:01\r\u001b[K     |███████████████▌                | 542 kB 22.1 MB/s eta 0:00:01\r\u001b[K     |███████████████▊                | 552 kB 22.1 MB/s eta 0:00:01\r\u001b[K     |████████████████                | 563 kB 22.1 MB/s eta 0:00:01\r\u001b[K     |████████████████▍               | 573 kB 22.1 MB/s eta 0:00:01\r\u001b[K     |████████████████▋               | 583 kB 22.1 MB/s eta 0:00:01\r\u001b[K     |█████████████████               | 593 kB 22.1 MB/s eta 0:00:01\r\u001b[K     |█████████████████▏              | 604 kB 22.1 MB/s eta 0:00:01\r\u001b[K     |█████████████████▌              | 614 kB 22.1 MB/s eta 0:00:01\r\u001b[K     |█████████████████▉              | 624 kB 22.1 MB/s eta 0:00:01\r\u001b[K     |██████████████████              | 634 kB 22.1 MB/s eta 0:00:01\r\u001b[K     |██████████████████▍             | 645 kB 22.1 MB/s eta 0:00:01\r\u001b[K     |██████████████████▊             | 655 kB 22.1 MB/s eta 0:00:01\r\u001b[K     |███████████████████             | 665 kB 22.1 MB/s eta 0:00:01\r\u001b[K     |███████████████████▎            | 675 kB 22.1 MB/s eta 0:00:01\r\u001b[K     |███████████████████▌            | 686 kB 22.1 MB/s eta 0:00:01\r\u001b[K     |███████████████████▉            | 696 kB 22.1 MB/s eta 0:00:01\r\u001b[K     |████████████████████▏           | 706 kB 22.1 MB/s eta 0:00:01\r\u001b[K     |████████████████████▍           | 716 kB 22.1 MB/s eta 0:00:01\r\u001b[K     |████████████████████▊           | 727 kB 22.1 MB/s eta 0:00:01\r\u001b[K     |█████████████████████           | 737 kB 22.1 MB/s eta 0:00:01\r\u001b[K     |█████████████████████▎          | 747 kB 22.1 MB/s eta 0:00:01\r\u001b[K     |█████████████████████▋          | 757 kB 22.1 MB/s eta 0:00:01\r\u001b[K     |█████████████████████▉          | 768 kB 22.1 MB/s eta 0:00:01\r\u001b[K     |██████████████████████▏         | 778 kB 22.1 MB/s eta 0:00:01\r\u001b[K     |██████████████████████▌         | 788 kB 22.1 MB/s eta 0:00:01\r\u001b[K     |██████████████████████▊         | 798 kB 22.1 MB/s eta 0:00:01\r\u001b[K     |███████████████████████         | 808 kB 22.1 MB/s eta 0:00:01\r\u001b[K     |███████████████████████▍        | 819 kB 22.1 MB/s eta 0:00:01\r\u001b[K     |███████████████████████▋        | 829 kB 22.1 MB/s eta 0:00:01\r\u001b[K     |████████████████████████        | 839 kB 22.1 MB/s eta 0:00:01\r\u001b[K     |████████████████████████▏       | 849 kB 22.1 MB/s eta 0:00:01\r\u001b[K     |████████████████████████▌       | 860 kB 22.1 MB/s eta 0:00:01\r\u001b[K     |████████████████████████▉       | 870 kB 22.1 MB/s eta 0:00:01\r\u001b[K     |█████████████████████████       | 880 kB 22.1 MB/s eta 0:00:01\r\u001b[K     |█████████████████████████▍      | 890 kB 22.1 MB/s eta 0:00:01\r\u001b[K     |█████████████████████████▊      | 901 kB 22.1 MB/s eta 0:00:01\r\u001b[K     |██████████████████████████      | 911 kB 22.1 MB/s eta 0:00:01\r\u001b[K     |██████████████████████████▎     | 921 kB 22.1 MB/s eta 0:00:01\r\u001b[K     |██████████████████████████▌     | 931 kB 22.1 MB/s eta 0:00:01\r\u001b[K     |██████████████████████████▉     | 942 kB 22.1 MB/s eta 0:00:01\r\u001b[K     |███████████████████████████▏    | 952 kB 22.1 MB/s eta 0:00:01\r\u001b[K     |███████████████████████████▍    | 962 kB 22.1 MB/s eta 0:00:01\r\u001b[K     |███████████████████████████▊    | 972 kB 22.1 MB/s eta 0:00:01\r\u001b[K     |████████████████████████████    | 983 kB 22.1 MB/s eta 0:00:01\r\u001b[K     |████████████████████████████▎   | 993 kB 22.1 MB/s eta 0:00:01\r\u001b[K     |████████████████████████████▋   | 1.0 MB 22.1 MB/s eta 0:00:01\r\u001b[K     |████████████████████████████▉   | 1.0 MB 22.1 MB/s eta 0:00:01\r\u001b[K     |█████████████████████████████▏  | 1.0 MB 22.1 MB/s eta 0:00:01\r\u001b[K     |█████████████████████████████▌  | 1.0 MB 22.1 MB/s eta 0:00:01\r\u001b[K     |█████████████████████████████▊  | 1.0 MB 22.1 MB/s eta 0:00:01\r\u001b[K     |██████████████████████████████  | 1.1 MB 22.1 MB/s eta 0:00:01\r\u001b[K     |██████████████████████████████▍ | 1.1 MB 22.1 MB/s eta 0:00:01\r\u001b[K     |██████████████████████████████▋ | 1.1 MB 22.1 MB/s eta 0:00:01\r\u001b[K     |███████████████████████████████ | 1.1 MB 22.1 MB/s eta 0:00:01\r\u001b[K     |███████████████████████████████▏| 1.1 MB 22.1 MB/s eta 0:00:01\r\u001b[K     |███████████████████████████████▌| 1.1 MB 22.1 MB/s eta 0:00:01\r\u001b[K     |███████████████████████████████▉| 1.1 MB 22.1 MB/s eta 0:00:01\r\u001b[K     |████████████████████████████████| 1.1 MB 22.1 MB/s \n",
            "\u001b[?25hRequirement already satisfied: typeguard>=2.7 in /usr/local/lib/python3.7/dist-packages (from tensorflow-addons) (2.7.1)\n",
            "Installing collected packages: tensorflow-addons\n",
            "Successfully installed tensorflow-addons-0.16.1\n"
          ]
        }
      ],
      "source": [
        "pip install tensorflow-addons"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "TDbtYlRrDZN8"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import tensorflow as tf\n",
        "from tensorflow import keras\n",
        "from tensorflow.keras import layers\n",
        "import tensorflow_addons as tfa"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Ai21VBRoDb8k",
        "outputId": "a7d2a79e-2ab8-4b0c-c6bf-f0a7a0e7c8f3"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: tensorflow-addons in /usr/local/lib/python3.7/dist-packages (0.16.1)\n",
            "Requirement already satisfied: typeguard>=2.7 in /usr/local/lib/python3.7/dist-packages (from tensorflow-addons) (2.7.1)\n"
          ]
        }
      ],
      "source": [
        "#pip install -U tensorflow-addons"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "JRjyvXGhDfnk"
      },
      "outputs": [],
      "source": [
        "data = []\n",
        "labels = []\n",
        "# We have 43 Classes\n",
        "classes = 5\n",
        "cur_path = '/content/drive/MyDrive/Research'"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "hrFfKhRmDgq0",
        "outputId": "1ede728d-24d0-46df-d88b-5a036c421dcd"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'/content/drive/MyDrive/Research'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 7
        }
      ],
      "source": [
        "cur_path"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dsCSB_F2DiPu",
        "outputId": "1a1f7da2-9f5a-4132-9228-b00bfd49a8b6"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "/content/drive/MyDrive/Research/train/0\n",
            "/content/drive/MyDrive/Research/train/1\n",
            "/content/drive/MyDrive/Research/train/2\n",
            "/content/drive/MyDrive/Research/train/3\n",
            "/content/drive/MyDrive/Research/train/4\n"
          ]
        }
      ],
      "source": [
        "for i in range(classes):\n",
        "    path = os.path.join(cur_path,'train',str(i))\n",
        "    print(path)\n",
        "    images = os.listdir(path)\n",
        "    for a in images:\n",
        "        try:\n",
        "            image = Image.open(path + '/'+ a)\n",
        "            image = image.resize((30,30))\n",
        "            image = np.array(image)\n",
        "            data.append(image)\n",
        "            labels.append(i)\n",
        "        except Exception as e:\n",
        "            print(e)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "WUv05X8dDlJM"
      },
      "outputs": [],
      "source": [
        "data = np.array(data)\n",
        "labels = np.array(labels)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6VwPks5WDmtd",
        "outputId": "3ae2d2ff-c1eb-43dd-f472-c3a4d5fb06e8"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(8070, 30, 30, 3) (8070,)\n"
          ]
        }
      ],
      "source": [
        "print(data.shape, labels.shape)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "sx0uxOa4Dpj8"
      },
      "outputs": [],
      "source": [
        "X_train, X_test, y_train, y_test = train_test_split(data, labels, test_size=0.2, random_state=0)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "L-aZlEPmOEg7"
      },
      "outputs": [],
      "source": [
        "#X_train, X_val, y_train, y_val = train_test_split(data, labels, test_size=0.2, random_state=0)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "lX4IuLwdN5VW"
      },
      "source": [
        ""
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8cseSM9rDslV",
        "outputId": "497170c9-ffb6-4d05-c198-5f3c6180016a"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(6456, 30, 30, 3) (1614, 30, 30, 3) (6456,) (1614,)\n"
          ]
        }
      ],
      "source": [
        "print(X_train.shape, X_test.shape, y_train.shape, y_test.shape)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 266
        },
        "id": "XZxXJBSPD0bt",
        "outputId": "ea9d6606-2944-40b9-805f-6d989f21fcea"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(-0.5, 29.5, 29.5, -0.5)"
            ]
          },
          "metadata": {},
          "execution_count": 13
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 288x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "plt.figure(figsize=(4, 4))\n",
        "image = X_train[np.random.choice(range(X_train.shape[0]))]\n",
        "plt.imshow(image.astype(\"uint8\"))\n",
        "plt.axis(\"off\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "LuSzOlOYD_sc"
      },
      "outputs": [],
      "source": [
        "#from keras.utils import to_categorical\n",
        "from tensorflow.keras.utils import to_categorical"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "iF5nDr0xEBcF"
      },
      "outputs": [],
      "source": [
        "data_augmentation = keras.Sequential(\n",
        "    [\n",
        "        layers.Normalization(),\n",
        "        layers.Resizing(72, 72),\n",
        "        layers.RandomFlip(\"horizontal\"),\n",
        "        layers.RandomRotation(factor=0.02),\n",
        "        layers.RandomZoom(\n",
        "            height_factor=0.2, width_factor=0.2\n",
        "        ),\n",
        "    ],\n",
        "    name=\"data_augmentation\",\n",
        ")\n",
        "# Compute the mean and the variance of the training data for normalization.\n",
        "data_augmentation.layers[0].adapt(X_train)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "-eopmq0yEDB8"
      },
      "outputs": [],
      "source": [
        "def mlp(x, hidden_units, dropout_rate):\n",
        "    for units in hidden_units:\n",
        "        x = layers.Dense(units, activation=tf.nn.gelu)(x)\n",
        "        x = layers.Dropout(dropout_rate)(x)\n",
        "    return x"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "6plnmj_sEGRq"
      },
      "outputs": [],
      "source": [
        "learning_rate = 0.001\n",
        "weight_decay = 0.0001\n",
        "batch_size = 256\n",
        "num_epochs = 30\n",
        "image_size = 72  # We'll resize input images to this size\n",
        "patch_size = 6  # Size of the patches to be extract from the input images\n",
        "num_patches = (image_size // patch_size) ** 2\n",
        "projection_dim = 64\n",
        "num_heads = 4\n",
        "transformer_units = [\n",
        "    projection_dim * 2,\n",
        "    projection_dim,\n",
        "]  # Size of the transformer layers\n",
        "transformer_layers = 8\n",
        "mlp_head_units = [2048, 1024]  # Size of the dense layers of the final classifier"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "yWHZ8tO_EJCv"
      },
      "outputs": [],
      "source": [
        "class Patches(layers.Layer):\n",
        "    def __init__(self, patch_size):\n",
        "        super(Patches, self).__init__()\n",
        "        self.patch_size = patch_size\n",
        "\n",
        "    def call(self, images):\n",
        "        batch_size = tf.shape(images)[0]\n",
        "        patches = tf.image.extract_patches(\n",
        "            images=images,\n",
        "            sizes=[1, self.patch_size, self.patch_size, 1],\n",
        "            strides=[1, self.patch_size, self.patch_size, 1],\n",
        "            rates=[1, 1, 1, 1],\n",
        "            padding=\"VALID\",\n",
        "        )\n",
        "        patch_dims = patches.shape[-1]\n",
        "        patches = tf.reshape(patches, [batch_size, -1, patch_dims])\n",
        "        return patches"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 320
        },
        "id": "48SuAlupELUE",
        "outputId": "0e16e960-a10d-408c-abc3-79b5058a7837"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Image size: 72 X 72\n",
            "Patch size: 6 X 6\n",
            "Patches per image: 144\n",
            "Elements per patch: 108\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 288x288 with 144 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "resized_image = tf.image.resize(\n",
        "    tf.convert_to_tensor([image]), size=(image_size, image_size)\n",
        ")\n",
        "patches = Patches(patch_size)(resized_image)\n",
        "print(f\"Image size: {image_size} X {image_size}\")\n",
        "print(f\"Patch size: {patch_size} X {patch_size}\")\n",
        "print(f\"Patches per image: {patches.shape[1]}\")\n",
        "print(f\"Elements per patch: {patches.shape[-1]}\")\n",
        "\n",
        "n = int(np.sqrt(patches.shape[1]))\n",
        "plt.figure(figsize=(4, 4))\n",
        "for i, patch in enumerate(patches[0]):\n",
        "    ax = plt.subplot(n, n, i + 1)\n",
        "    patch_img = tf.reshape(patch, (patch_size, patch_size, 3))\n",
        "    plt.imshow(patch_img.numpy().astype(\"uint8\"))\n",
        "    plt.axis(\"off\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "o-eMSuCDENNB"
      },
      "outputs": [],
      "source": [
        "class PatchEncoder(layers.Layer):\n",
        "    def __init__(self, num_patches, projection_dim):\n",
        "        super(PatchEncoder, self).__init__()\n",
        "        self.num_patches = num_patches\n",
        "        self.projection = layers.Dense(units=projection_dim)\n",
        "        self.position_embedding = layers.Embedding(\n",
        "            input_dim=num_patches, output_dim=projection_dim\n",
        "        )\n",
        "\n",
        "    def call(self, patch):\n",
        "        positions = tf.range(start=0, limit=self.num_patches, delta=1)\n",
        "        encoded = self.projection(patch) + self.position_embedding(positions)\n",
        "        return encoded"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "wnAwFMmYEOgc"
      },
      "outputs": [],
      "source": [
        "input_shape = (30, 30, 3)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "CGSeJd-XERjF"
      },
      "outputs": [],
      "source": [
        "def create_vit_classifier():\n",
        "    inputs = layers.Input(shape=input_shape)\n",
        "    # Augment data.\n",
        "    augmented = data_augmentation(inputs)\n",
        "    # Create patches.\n",
        "    patches = Patches(patch_size)(augmented)\n",
        "    # Encode patches.\n",
        "    encoded_patches = PatchEncoder(num_patches, projection_dim)(patches)\n",
        "\n",
        "    # Create multiple layers of the Transformer block.\n",
        "    for _ in range(transformer_layers):\n",
        "        # Layer normalization 1.\n",
        "        x1 = layers.LayerNormalization(epsilon=1e-6)(encoded_patches)\n",
        "        # Create a multi-head attention layer.\n",
        "        attention_output = layers.MultiHeadAttention(\n",
        "            num_heads=num_heads, key_dim=projection_dim, dropout=0.1\n",
        "        )(x1, x1)\n",
        "        # Skip connection 1.\n",
        "        x2 = layers.Add()([attention_output, encoded_patches])\n",
        "        # Layer normalization 2.\n",
        "        x3 = layers.LayerNormalization(epsilon=1e-6)(x2)\n",
        "        # MLP.\n",
        "        x3 = mlp(x3, hidden_units=transformer_units, dropout_rate=0.1)\n",
        "        # Skip connection 2.\n",
        "        encoded_patches = layers.Add()([x3, x2])\n",
        "\n",
        "    # Create a [batch_size, projection_dim] tensor.\n",
        "    representation = layers.LayerNormalization(epsilon=1e-6)(encoded_patches)\n",
        "    representation = layers.Flatten()(representation)\n",
        "    representation = layers.Dropout(0.5)(representation)\n",
        "    # Add MLP.\n",
        "    features = mlp(representation, hidden_units=mlp_head_units, dropout_rate=0.5)\n",
        "    # Classify outputs.\n",
        "    logits = layers.Dense(classes)(features)\n",
        "    # Create the Keras model.\n",
        "    model = keras.Model(inputs=inputs, outputs=logits)\n",
        "    return model"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ONKw9neUEXDF",
        "outputId": "9909447c-8c37-4a13-e9b7-40730bc41732"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/30\n",
            "23/23 [==============================] - 332s 14s/step - loss: 4.1250 - accuracy: 0.3217 - top-5-accuracy: 1.0000 - val_loss: 1.3991 - val_accuracy: 0.3406 - val_top-5-accuracy: 1.0000\n",
            "Epoch 2/30\n",
            "23/23 [==============================] - 311s 14s/step - loss: 1.4074 - accuracy: 0.3706 - top-5-accuracy: 1.0000 - val_loss: 1.2568 - val_accuracy: 0.4272 - val_top-5-accuracy: 1.0000\n",
            "Epoch 3/30\n",
            "23/23 [==============================] - 313s 14s/step - loss: 1.2787 - accuracy: 0.4203 - top-5-accuracy: 1.0000 - val_loss: 1.2024 - val_accuracy: 0.4644 - val_top-5-accuracy: 1.0000\n",
            "Epoch 4/30\n",
            "23/23 [==============================] - 315s 14s/step - loss: 1.2347 - accuracy: 0.4530 - top-5-accuracy: 1.0000 - val_loss: 1.1273 - val_accuracy: 0.4721 - val_top-5-accuracy: 1.0000\n",
            "Epoch 5/30\n",
            "23/23 [==============================] - 314s 14s/step - loss: 1.1881 - accuracy: 0.4742 - top-5-accuracy: 1.0000 - val_loss: 1.0733 - val_accuracy: 0.5186 - val_top-5-accuracy: 1.0000\n",
            "Epoch 6/30\n",
            "23/23 [==============================] - 318s 14s/step - loss: 1.1039 - accuracy: 0.5260 - top-5-accuracy: 1.0000 - val_loss: 0.9451 - val_accuracy: 0.6037 - val_top-5-accuracy: 1.0000\n",
            "Epoch 7/30\n",
            "23/23 [==============================] - 317s 14s/step - loss: 1.0018 - accuracy: 0.5836 - top-5-accuracy: 1.0000 - val_loss: 0.7592 - val_accuracy: 0.7214 - val_top-5-accuracy: 1.0000\n",
            "Epoch 8/30\n",
            "23/23 [==============================] - 320s 14s/step - loss: 0.8417 - accuracy: 0.6546 - top-5-accuracy: 1.0000 - val_loss: 0.5653 - val_accuracy: 0.8127 - val_top-5-accuracy: 1.0000\n",
            "Epoch 9/30\n",
            "23/23 [==============================] - 315s 14s/step - loss: 0.7000 - accuracy: 0.7250 - top-5-accuracy: 1.0000 - val_loss: 0.4550 - val_accuracy: 0.8344 - val_top-5-accuracy: 1.0000\n",
            "Epoch 10/30\n",
            "23/23 [==============================] - 320s 14s/step - loss: 0.6219 - accuracy: 0.7609 - top-5-accuracy: 1.0000 - val_loss: 0.3428 - val_accuracy: 0.8932 - val_top-5-accuracy: 1.0000\n",
            "Epoch 11/30\n",
            "23/23 [==============================] - 314s 14s/step - loss: 0.5090 - accuracy: 0.8067 - top-5-accuracy: 1.0000 - val_loss: 0.2604 - val_accuracy: 0.9133 - val_top-5-accuracy: 1.0000\n",
            "Epoch 12/30\n",
            "23/23 [==============================] - 320s 14s/step - loss: 0.4659 - accuracy: 0.8272 - top-5-accuracy: 1.0000 - val_loss: 0.2353 - val_accuracy: 0.9319 - val_top-5-accuracy: 1.0000\n",
            "Epoch 13/30\n",
            "23/23 [==============================] - 315s 14s/step - loss: 0.4458 - accuracy: 0.8349 - top-5-accuracy: 1.0000 - val_loss: 0.2150 - val_accuracy: 0.9272 - val_top-5-accuracy: 1.0000\n",
            "Epoch 14/30\n",
            "23/23 [==============================] - 322s 14s/step - loss: 0.3638 - accuracy: 0.8651 - top-5-accuracy: 1.0000 - val_loss: 0.1467 - val_accuracy: 0.9474 - val_top-5-accuracy: 1.0000\n",
            "Epoch 15/30\n",
            "23/23 [==============================] - 317s 14s/step - loss: 0.3267 - accuracy: 0.8799 - top-5-accuracy: 1.0000 - val_loss: 0.1390 - val_accuracy: 0.9582 - val_top-5-accuracy: 1.0000\n",
            "Epoch 16/30\n",
            "23/23 [==============================] - 323s 14s/step - loss: 0.2901 - accuracy: 0.8917 - top-5-accuracy: 1.0000 - val_loss: 0.1328 - val_accuracy: 0.9551 - val_top-5-accuracy: 1.0000\n",
            "Epoch 17/30\n",
            "23/23 [==============================] - 318s 14s/step - loss: 0.2649 - accuracy: 0.9050 - top-5-accuracy: 1.0000 - val_loss: 0.0926 - val_accuracy: 0.9675 - val_top-5-accuracy: 1.0000\n",
            "Epoch 18/30\n",
            "23/23 [==============================] - 326s 14s/step - loss: 0.2561 - accuracy: 0.9069 - top-5-accuracy: 1.0000 - val_loss: 0.0938 - val_accuracy: 0.9690 - val_top-5-accuracy: 1.0000\n",
            "Epoch 19/30\n",
            "23/23 [==============================] - 321s 14s/step - loss: 0.2259 - accuracy: 0.9153 - top-5-accuracy: 1.0000 - val_loss: 0.0742 - val_accuracy: 0.9799 - val_top-5-accuracy: 1.0000\n",
            "Epoch 20/30\n",
            "23/23 [==============================] - 324s 14s/step - loss: 0.1996 - accuracy: 0.9330 - top-5-accuracy: 1.0000 - val_loss: 0.0909 - val_accuracy: 0.9737 - val_top-5-accuracy: 1.0000\n",
            "Epoch 21/30\n",
            "23/23 [==============================] - 318s 14s/step - loss: 0.2154 - accuracy: 0.9224 - top-5-accuracy: 1.0000 - val_loss: 0.0842 - val_accuracy: 0.9768 - val_top-5-accuracy: 1.0000\n",
            "Epoch 22/30\n",
            "23/23 [==============================] - 325s 14s/step - loss: 0.1891 - accuracy: 0.9294 - top-5-accuracy: 1.0000 - val_loss: 0.0750 - val_accuracy: 0.9768 - val_top-5-accuracy: 1.0000\n",
            "Epoch 23/30\n",
            "23/23 [==============================] - 321s 14s/step - loss: 0.1798 - accuracy: 0.9373 - top-5-accuracy: 1.0000 - val_loss: 0.0447 - val_accuracy: 0.9845 - val_top-5-accuracy: 1.0000\n",
            "Epoch 24/30\n",
            "23/23 [==============================] - 326s 14s/step - loss: 0.1842 - accuracy: 0.9332 - top-5-accuracy: 1.0000 - val_loss: 0.0556 - val_accuracy: 0.9861 - val_top-5-accuracy: 1.0000\n",
            "Epoch 25/30\n",
            "23/23 [==============================] - 324s 14s/step - loss: 0.1521 - accuracy: 0.9466 - top-5-accuracy: 1.0000 - val_loss: 0.0520 - val_accuracy: 0.9845 - val_top-5-accuracy: 1.0000\n",
            "Epoch 26/30\n",
            "23/23 [==============================] - 321s 14s/step - loss: 0.1463 - accuracy: 0.9506 - top-5-accuracy: 1.0000 - val_loss: 0.0457 - val_accuracy: 0.9814 - val_top-5-accuracy: 1.0000\n",
            "Epoch 27/30\n",
            "23/23 [==============================] - 324s 14s/step - loss: 0.1269 - accuracy: 0.9539 - top-5-accuracy: 1.0000 - val_loss: 0.0273 - val_accuracy: 0.9923 - val_top-5-accuracy: 1.0000\n",
            "Epoch 28/30\n",
            "23/23 [==============================] - 318s 14s/step - loss: 0.1255 - accuracy: 0.9542 - top-5-accuracy: 1.0000 - val_loss: 0.0312 - val_accuracy: 0.9892 - val_top-5-accuracy: 1.0000\n",
            "Epoch 29/30\n",
            "23/23 [==============================] - 324s 14s/step - loss: 0.1201 - accuracy: 0.9582 - top-5-accuracy: 1.0000 - val_loss: 0.0590 - val_accuracy: 0.9799 - val_top-5-accuracy: 1.0000\n",
            "Epoch 30/30\n",
            "23/23 [==============================] - 319s 14s/step - loss: 0.1488 - accuracy: 0.9509 - top-5-accuracy: 1.0000 - val_loss: 0.0498 - val_accuracy: 0.9830 - val_top-5-accuracy: 1.0000\n",
            "51/51 [==============================] - 27s 538ms/step - loss: 0.0350 - accuracy: 0.9870 - top-5-accuracy: 1.0000\n",
            "Test accuracy: 98.7%\n",
            "Test top 5 accuracy: 100.0%\n"
          ]
        }
      ],
      "source": [
        "def run_experiment(model):\n",
        "    optimizer = tfa.optimizers.AdamW(\n",
        "        learning_rate=learning_rate, weight_decay=weight_decay\n",
        "    )\n",
        "\n",
        "    model.compile(\n",
        "        optimizer=optimizer,\n",
        "        loss=keras.losses.SparseCategoricalCrossentropy(from_logits=True),\n",
        "        metrics=[\n",
        "            keras.metrics.SparseCategoricalAccuracy(name=\"accuracy\"),\n",
        "            keras.metrics.SparseTopKCategoricalAccuracy(5, name=\"top-5-accuracy\"),\n",
        "        ],\n",
        "    )\n",
        "\n",
        "    checkpoint_filepath = \"/tmp/checkpoint\"\n",
        "    checkpoint_callback = keras.callbacks.ModelCheckpoint(\n",
        "        checkpoint_filepath,\n",
        "        monitor=\"val_accuracy\",\n",
        "        save_best_only=True,\n",
        "        save_weights_only=True,\n",
        "    )\n",
        "\n",
        "    history = model.fit(\n",
        "        x=X_train,\n",
        "        y=y_train,\n",
        "        batch_size=batch_size,\n",
        "        epochs=num_epochs,\n",
        "        validation_split=0.1,\n",
        "        callbacks=[checkpoint_callback],\n",
        "    )\n",
        "\n",
        "    model.load_weights(checkpoint_filepath)\n",
        "    _, accuracy, top_5_accuracy = model.evaluate(X_test, y_test)\n",
        "    print(f\"Test accuracy: {round(accuracy * 100, 2)}%\")\n",
        "    print(f\"Test top 5 accuracy: {round(top_5_accuracy * 100, 2)}%\")\n",
        "\n",
        "    return history\n",
        "\n",
        "\n",
        "vit_classifier = create_vit_classifier()\n",
        "history = run_experiment(vit_classifier)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "A3rC4XNeEYv0",
        "outputId": "24e38d7e-55e0-4426-c157-69f9cbe61443"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "dict_keys(['loss', 'accuracy', 'top-5-accuracy', 'val_loss', 'val_accuracy', 'val_top-5-accuracy'])"
            ]
          },
          "metadata": {},
          "execution_count": 25
        }
      ],
      "source": [
        "#history.history ??\n",
        "history.history.keys()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "id": "y7p94dQsEaUN",
        "outputId": "6089601e-7faa-4fad-f3ad-943a52e486bc"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "loss_train = history.history['accuracy']\n",
        "loss_val = history.history['val_accuracy']\n",
        "epochs = range(0,30)\n",
        "plt.plot(epochs, loss_train, 'g', label='Training accuracy')\n",
        "plt.plot(epochs, loss_val, 'b', label='validation accuracy')\n",
        "plt.title('Training and Validation accuracy')\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Accuracy')\n",
        "plt.legend()\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 823
        },
        "id": "7zMs5wZhEc04",
        "outputId": "2d5c5a8d-8abe-4779-a051-54058e01cfdb"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.5, 1.0, 'Accuracy Curves')"
            ]
          },
          "metadata": {},
          "execution_count": 28
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 576x432 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 576x432 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "plt.figure(figsize=[8,6])\n",
        "plt.plot(history.history['loss'],'r',linewidth=3.0)\n",
        "plt.plot(history.history['val_loss'],'b',linewidth=3.0)\n",
        "plt.legend(['Training loss', 'Validation Loss'],fontsize=18)\n",
        "plt.xlabel('Epochs ',fontsize=16)\n",
        "plt.ylabel('Loss',fontsize=16)\n",
        "plt.title('Loss Curves',fontsize=16)\n",
        "  \n",
        "# Accuracy Curves\n",
        "plt.figure(figsize=[8,6])\n",
        "plt.plot(history.history['accuracy'],'r',linewidth=3.0)\n",
        "plt.plot(history.history['val_accuracy'],'b',linewidth=3.0)\n",
        "plt.legend(['Training Accuracy', 'Validation Accuracy'],fontsize=18)\n",
        "plt.xlabel('Epochs ',fontsize=16)\n",
        "plt.ylabel('Accuracy',fontsize=16)\n",
        "plt.title('Accuracy Curves',fontsize=16)"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "collapsed_sections": [],
      "name": "Traffic_Sign_Detection.ipynb",
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
